 linux shell 脚本实现tcp/upd协议通讯（重定向应用）

前几天发了重定向以及管道相关使用方法，今天这里发些很有趣的例子。通过重定向实现基于tcp/udp协议的软件通讯。

 

linux 设备里面有个比较特殊的文件:

/dev/[tcp|upd]/host/port 只要读取或者写入这个文件，相当于系统会尝试连接:host 这台机器，对应port端口。如果主机以及端口存在，就建立一个socket 连接。将在，/proc/self/fd目录下面，有对应的文件出现。

一、测试下：/dev/tcp/host/post文件
    [chengmo@centos5  shell]$ cat</dev/tcp/127.0.0.1/22
    SSH-2.0-OpenSSH_5.1
    #我的机器shell端口是：22
    #实际:/dev/tcp根本没有这个目录，这是属于特殊设备
    [chengmo@centos5  shell]$ cat</dev/tcp/127.0.0.1/223
    -bash: connect: 拒绝连接
    -bash: /dev/tcp/127.0.0.1/223: 拒绝连接
    #223接口不存在,打开失败
     
    [chengmo@centos5  shell]$ exec 8<>/dev/tcp/127.0.0.1/22
    [chengmo@centos5  shell]$ ls -l /proc/self/fd/
    总计 0
    lrwx------ 1 chengmo chengmo 64 10-21 23:05 0 -> /dev/pts/0
    lrwx------ 1 chengmo chengmo 64 10-21 23:05 1 -> /dev/pts/0
    lrwx------ 1 chengmo chengmo 64 10-21 23:05 2 -> /dev/pts/0
    lr-x------ 1 chengmo chengmo 64 10-21 23:05 3 -> /proc/22185/fd
    lrwx------ 1 chengmo chengmo 64 10-21 23:05 8 -> socket:[15067661]
     
    #文件描述符8，已经打开一个socket通讯通道，这个是一个可以读写socket通道,因为用："<>"打开
    [chengmo@centos5  shell]$ exec 8>&-
    #关闭通道
    [chengmo@centos5  shell]$ ls -l /proc/self/fd/
    总计 0
    lrwx------ 1 chengmo chengmo 64 10-21 23:08 0 -> /dev/pts/0
    lrwx------ 1 chengmo chengmo 64 10-21 23:08 1 -> /dev/pts/0
    lrwx------ 1 chengmo chengmo 64 10-21 23:08 2 -> /dev/pts/0
    lr-x------ 1 chengmo chengmo 64 10-21 23:08 3 -> /proc/22234/fd

     

    从时间服务器读取时间：

    [chengmo@centos5 html]$ cat</dev/tcp/time-b.nist.gov/13

    55491 10-10-22 11:33:49 17 0 0 596.3 UTC(NIST) *

    上面这条语句使用重定向输入语句就可以了。

 

二、通过重定向读取远程web服务器头信息
    #!/bin/sh 
    #testhttphead.sh
    #实现通过主机名，端口读取web 服务器header信息
    #copyright chengmo,qq:8292669
     
    if(($#<2));then
        echo "usage:$0 host port";
        exit 1;
    fi
    #如果参数缺失，退出程序，返回状态1
     
    exec 6<>/dev/tcp/$1/$2 2>/dev/null;
    #打开host的port 可读写的socket连接，与文件描述符6连接
     
    if(($?!=0));then
        echo "open $1 $2 error!";
        exit 1;
    fi
    #如果打开失败，$?返回不为0，终止程序
     
    echo -e "HEAD / HTTP/1.1\n\n\n\n\n">&6; 
    #将HEAD 信息，发送给socket连接
     
    cat<&6; 
    #从socket读取返回信息，显示为标准输出
     
    exec 6<&-;
    exec 6>&-; 
    #关闭socket的输入，输出
     
    exit 0;

     

    脚本建立后：存为testhttphead.sh

    运行结果：
    [chengmo@centos5 ~/shell]$ sh testhttphead.sh www.baidu.com 80
    HTTP/1.1 200 OK
    Date: Thu, 21 Oct 2010 15:17:23 GMT
    Server: BWS/1.0
    Content-Length: 6218
    Content-Type: text/html;charset=gb2312
    Cache-Control: private
    Expires: Thu, 21 Oct 2010 15:17:23 GMT
    Set-Cookie: BAIDUID=1C40B2F8C676180FD887379A6E286DC1:FG=1; expires=Thu, 21-Oct-40 15:17:23 GMT; path=/; domain=.baidu.com
    P3P: CP=" OTI DSP COR IVA OUR IND COM "
    Connection: Keep-Alive
     
    [chengmo@centos5 ~/shell]$ sh testhttphead.sh 127.0.0.1 8080
    open 127.0.0.1 8080 error!
    突然有个奇怪想法：

    我们在windows时代就通过telnet 可以实现tcp/upd协议通讯，那么如果用传统方法怎么实现呢？	
    [chengmo@centos5 ~/shell]$ echo -e "HEAD / HTTP/1.1\n\n\n\n\n"|telnet www.baidu.com 80 
    Trying 220.181.6.175...
    Connected to www.baidu.com.
    Escape character is '^]'.
    Connection closed by foreign host.
     
    #直接给发送，失败
    [chengmo@centos5 ~/shell]$ (telnet www.baidu.com 80)<<EOF
    HEAD / HTTP/1.1
     
      
    EOF
    Trying 220.181.6.175...
    Connected to www.baidu.com.
    Escape character is '^]'.
    Connection closed by foreign host.
    #重定向输入，还是失败？

    找到正确方法：
    [chengmo@centos5 shell]$ (echo -e "HEAD / HTTP/1.1\n\n\n\n\n";sleep 2)|telnet www.baidu.com 80 
    Trying 220.181.6.175...
    Connected to www.baidu.com.
    Escape character is '^]'.
    HTTP/1.1 200 OK
    Date: Thu, 21 Oct 2010 15:51:58 GMT
    Server: BWS/1.0
    Content-Length: 6218
    Content-Type: text/html;charset=gb2312
    Cache-Control: private
    Expires: Thu, 21 Oct 2010 15:51:58 GMT
    Set-Cookie: BAIDUID=0B6A01ACECD5353E4247E088A8CB345A:FG=1; expires=Thu, 21-Oct-40 15:51:58 GMT; path=/; domain=.baidu.com
    P3P: CP=" OTI DSP COR IVA OUR IND COM "
    Connection: Keep-Alive
    #成功了！加入sleep 居然可以了，sleep 改成1秒也可以

     

    是不是由于sleep后，echo会推出2秒发给通道：telnet呢？推论可以从这2个方面推翻：

    一个方面：通过()括的数据是一对命令，会作为一个子命令执行，一起执行完程序结束。每个命令echo语句，就直接发送到屏幕（也就是标准输出），只要有标准输出了，就会通过通道马上传个：telnet ，如果接下来命令还有输出，会注意传给telnet ，直到()内所有命令执行完，与通道连接就断开了。

     

    再一个方面：如果说是起到推迟发送的话，什么时候有数据过来，发给telnet，什么时候telnet命令启动。跟你推迟一点还是早一点发送过来。没有关系。

     

    这种类型命令，看出sleep，其实就是保持通道跟telnet 连接2秒钟。 通道连接着了，telnet终端输入也还在，因此可以保持从baidu服务器获得数据。

    所以,延迟多久，还是跟服务器处理速度有关系。

     

    如果通过echo 向telnet发送数据，保持通道联通，使用sleep是个很好方法。

    通过重定向给telnet输入参数这种方法，我还想不到怎么样实现延迟输入。有知道朋友，可以指点指点.

    区别：

    telnet与echo 实现 http访问，与通过打开读写socket是不一样的，打开socket通道，是可以进行交换处理的。传入命令，活动结果，再传入命令，再获得结果。telnet通过echo 就不能这样处理了。

     

     

 

三、通过shell脚本重定向实现监控memcache状态

    实例：

    #!/bin/sh
     
    #通过传入ip 以及端口，发送指令获得返回数据
    #copyright chengmo qq:8292669
     
    #函数往往放到最上面
    function sendmsg()
    {
        msg=$1;
        echo  "$1">&8;
        getout;
    }
    #向socket通道发送指令，并且调用获得返回参数
     
    function getout()
    {   
        #read 命令 -u 从打开文件描述符 8 读取数据，-d读取数据忽略掉:\r换行符 
        while read -u 8 -d $'\r' name; 
        do 
            if [ "${name}" == "END"  -o "${name}" == "ERROR" ];then
                break;
            fi;
            echo $name;
        done
    }
    #由于：memcached每次通讯完毕，会返回：END或者ERROR(出错），通过判断是否是"END"觉得读取是不是结束，否则循环不会停止
     
    if [ $# -lt 2 ];then
        echo "usage:$0 host port [command]";
        exit 1;
    fi;
     
    [[ $# -gt 2 ]]&&command=$3;
     
    #设置默认值 如果command为定义则为：stats
    command="${command=stats}";
    host="$1";
    port="$2";
     
     
     
    exec 8<>/dev/tcp/${host}/${port};
    #打开通向通道是8
     
    if [ "$?" != "0" ];then
        echo "open $host  $port fail!";
        exit 1;
    fi
     
    sendmsg "$command";
    #发送指定命令
     
     
    sendmsg "quit";
    #发送退出通向命令
     
     
    exec 8<&-;
    exec 8>&-;
    #关闭socket通道
     
    exit 0;

     

    这是通过重定向，实现socket通讯中，发送然后获取返回的例子。其实，上面代码看似一次只能发送一段。时间上。我们可以反复调用：sendmsg ，捕捉输出数据。实现连续的，读与写操作。

    实例截图：

     

    其它实现方法：

    其实通过：telnet也可以实现的。

    [chengmo@centos5 shell]$ (echo "stats";sleep 2)|telnet 127.0.0.1 11211

    通过nc命令实现：

    [chengmo@centos5 shell]$ (echo "stats")|nc 127.0.0.1 11211

    不需要加延迟，直接打开通道

第二个程序里面，看到shell完全可以处理交互设计了。如果按照这样，登陆ftp,pop3,stmp都可以类似实现。这些，我们通过shell socket类似程序实现，应该不困难，只是捕捉如发送解析的问题了。 


from: http://www.cnblogs.com/chengmo/archive/2010/10/22/1858302.html